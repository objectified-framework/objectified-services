openapi: 3.1.0
info:
  title: Objectified API
  version: 0.1.2
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    Objectified is a **time-series object database that supports dynamic schemas**.

    Objectified can also be utilized as a _Schema Store_, providing schema information
    for a project, framework, or platform.

    This API specification defines REST services for Objectified.  Requests made to
    this server can only be made using the `application/json` content type.
  contact:
    name: Objectified Project Members
    url: https://github.com/objectified-framework
    email: ksuenobu@fastmail.com
servers:
  - url: http://api.objectified.wiki/v1
tags:
  - name: Auth
    description: |
      Authentication services that are used in conjunction with third party authenticators.  These
      services provide access to user accounts based on their email addresses.  Any additional
      information provided by the third party authenticators are stored in the users' associated
      accounts, or in session variables as necessary.  Remaining information such as a user's
      name, or account settings are stored in Objectified through other services.
paths:
  /auth:
    post:
      tags:
        - Auth
      summary: Login service
      operationId: login
      description: |
        Logs a user into the system via their username and password combination.
      security: []
      requestBody:
        description: The user credentials with which to login.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: OK, returns the JWT session token that must be stored on the client.
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Access forbidden
components:
  securitySchemes:
    JWT:
      type: http
      description: JWT Authorization header using Bearer scheme.
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Login:
      type: object
      x-schema: obj
      required:
        - username
        - password
      description: Login credentials input
      properties:
        emailAddress:
          type: string
          description: The email address of the user logging in.
        source:
          type: string
          enum:
            - github
            - gitlab
            - azure
          description: Source of the account login.
