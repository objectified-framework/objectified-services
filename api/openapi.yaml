openapi: 3.1.0
info:
  title: Objectified API
  version: 0.1.2
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    Objectified is a **time-series object database that supports dynamic schemas**.

    Objectified can also be utilized as a _Schema Store_, providing schema information
    for a project, framework, or platform.

    This API specification defines REST services for Objectified.  Requests made to
    this server can only be made using the `application/json` content type.
  contact:
    name: Objectified Project Members
    url: https://github.com/objectified-framework
    email: ksuenobu@fastmail.com
servers:
  - url: https://api.objectified.wiki/v1
tags:
  - name: Auth
    description: |
      Authentication services that are used in conjunction with third party authenticators.  These
      services provide access to user accounts based on their email addresses.  Any additional
      information provided by the third party authenticators are stored in the users' associated
      accounts, or in session variables as necessary.  Remaining information such as a user's
      name, or account settings are stored in Objectified through other services.
  - name: Session
    description: |
      Session management for active users, which stores information regarding a user's interactions
      in the system through a database.  Session variables are programmatically available, and are
      not stored on the browser other than through access via the JWT.
paths:
  /auth:
    post:
      tags:
        - Auth
      summary: Login service
      operationId: login
      description: |
        Logs a user into the system via their username and password combination.
      security: []
      requestBody:
        description: The user credentials with which to login.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: OK, returns the JWT session token that must be stored on the client.
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Access forbidden
  /session:
    get:
      tags:
        - Session
      summary: Get Session
      operationId: getSession
      description: |
        Retrieves the currently active session for the user specified by their JWT token.
      security:
        - JWT: []
      responses:
        '200':
          description: The user session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      tags:
        - Session
      summary: Store Session
      operationId: postSession
      description: |
        Stores session data.
      security:
        - JWT: []
      requestBody:
        description: The session data to store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '201':
          description: No content
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Access forbidden
        '404':
          description: Not found
    delete:
      tags:
        - Session
      summary: Deletes Session
      operationId: deleteSession
      description: |
        Removes session data.
      security:
        - JWT: []
      responses:
        '201':
          description: No content
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Access forbidden
        '404':
          description: Not found
components:
  securitySchemes:
    JWT:
      type: http
      description: JWT Authorization header using Bearer scheme.
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Login:
      type: object
      x-schema: obj
      x-no-dao: true
      required:
        - username
        - source
        - jwt
      description: Login credentials input
      properties:
        emailAddress:
          type: string
          description: The email address of the user logging in.
        source:
          type: string
          enum:
            - github
            - gitlab
            - azure
          description: Source of the account login.
        jwt:
          type: string
          description: Encoded web token
    Session:
      type: object
      x-no-dao: true
      description: Session object
      required:
        - data
      properties:
        jwt:
          type: string
          description: The session JWT.
        data:
          type: object
          description: The session data.
